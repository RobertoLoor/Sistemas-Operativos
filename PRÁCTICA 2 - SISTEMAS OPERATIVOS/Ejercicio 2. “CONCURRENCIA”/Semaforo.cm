//---------DECLARACIÓN DE CONSTANTES
semaphore mutex, empty, full=0;

const int sizeB = 5;
const int figura = 1;
const int color = 2;
int objeto = 0;

//---------GRÁFICAS
void dibujar(){

  int pos1 = 60, pos2 = 200;
  
  for(objeto; objeto < sizeB; objeto++){

	create(objeto, figura, color, pos1, pos2, 45, 45);

	makevisible(objeto, 1);

	pos1 = pos1 + 100;
  }
  objeto = 0;

  create(100, 3, 5, pos1-40 , pos2-100, 45, 45);

  makevisible(100, 1);

  create(300, 3, 5, pos1-40 , pos2+100, 45, 45);

  makevisible(300, 1);

}




//---------PRODUCTOR
void producir(){
	// SECCIÓN CRÍTICA
}

void mensajePro(){
   
	cout<<"Productor produce."<<endl;
   
	changecolor(objeto, 5);

	objeto++;   
}


void productor(){ 

	for(;;){
		changecolor(100, 1); //Esperamos a que se agrege al buffer

		wait(empty); 

		changecolor(100, 5);

		wait(mutex);

		producir();

		mensajePro();

		signal(mutex); //Esperamos a que se decremente el buffer
      
		signal(full); //Desbloqueamos al consumidor
    	}
}

//---------CONSUMIDOR
void consumir(){
	// SECCIÓN CRÍTICA
}

void mensajeCon(){
	cout<<"Consumidor consume"<<endl;

	objeto--;

	changecolor(objeto, 1);    //Imprimimos el objeto en la interfaz gráfica como consumido
}

void consumidor(){

	for(;;){
		changecolor(300, 1);

		wait(full); //Esperamos hasta que el productor acabe

		changecolor(300, 5);
	
		wait(mutex); //Exclusion mutua

		consumir();

		mensajeCon();
      
		signal(mutex);
      
		signal(empty);
    	}
}

//=================[MAIN]===================
void main(){

   initialsem(empty, sizeB); // El productor se bloquea hasta que el consumidor lo desbloquee
   initialsem(mutex, 1);  // Solo un proceso a la vez
   initialsem(full, 0); // El consumidor se bloquea hasta que el productor le desbloquee
   dibujar();

   cobegin
   {
      productor();
      consumidor();
   }
}
